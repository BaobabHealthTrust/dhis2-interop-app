const updatedFacilities = this.state.facilities.filter(
      facility => !(facility.s)
    );
    if (updatedFacilities.length > 0) {
      const dhis2CompatFacilities = updatedFacilities.map(newFacility => ({
        name: newFacility.Name.newValue,
        shortName: newFacility.CommonName.newValue,
        openingDate: newFacility.DateOpened.newValue,
        parent: {
          name: newFacility.District.newValue + "-DHO"
        }
      }));
      for (let dhis2CompatFacility of dhis2CompatFacilities) {
        // const getParentId = await fetch(
        //   `http://192.168.2.252:7000/training/api/organisationUnits.json?filter=name:ilike:${
        //     dhis2CompatFacility.parent.name
        //   }&fields=[id]`,
        //   {
        //     method: "GET",
        //     headers: {
        //       "Content-Type": "application/json",
        //       Authorization: `Basic ${btoa(":")}`
        //     }
        //   }
        // );
        // const data = await getParentId.json();
        // dhis2CompatFacility.parent.id = data.organisationUnits[0].id;
        const getFacilityId = await fetch(
          `http://192.168.2.252:7000/training/api/organisationUnits.json?filter=shortName:ilike:${
            dhis2CompatFacility.shortName
          }&fields=[id]`, {
            method: "GET",
            // body: JSON.stringify(dhis2CompatFacility),
            headers: {
              "Content-Type": "application/json",
              Authorization: `Basic ${btoa("admin1:Scriptado9!")}`
            }
          }
        );
        const orgUnitId = await getFacilityId.json();
        console.log(orgUnitId);
      }
    }